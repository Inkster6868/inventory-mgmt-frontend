import React, { useEffect, useState } from "react";
import { SpinnerImg } from "../../loader/Loader";
import "../productList/productList.scss";
import { FaEdit, FaTrashAlt } from "react-icons/fa";
import { AiOutlineEye } from "react-icons/ai";
import Search from "../../search/Search";
import { useDispatch, useSelector } from "react-redux";
import {
  FILTER_PRODUCTS,
  selectFilteredPoducts,
} from "../../../redux/features/product/filterSlice";
import ReactPaginate from "react-paginate";
import { confirmAlert } from "react-confirm-alert";
import "react-confirm-alert/src/react-confirm-alert.css";
import {
  deleteProduct,
  getProducts,
} from "../../../redux/features/product/productSlice";
import { Link } from "react-router-dom";

const ProductList = ({ products, isLoading }) => {              /* destructuring the products and the isLoading state from sent from dashboard */
  const [search, setSearch] = useState("");              /*  initially the search box on the right of the page will contain no value */

  const filteredProducts = useSelector(selectFilteredPoducts);/* this will hold the filtered products array */

  const dispatch = useDispatch();

  const shortenText = (text, n) => {                        /* function fo shortening the text */
    if (text.length > n) {
      const shortenedText = text.substring(0, n).concat("...");
      return shortenedText;
    }
    return text;
  };

  const delProduct = async (id) => {    /* the '_id' generated by the mongodb is being passed here  */
    console.log(id);
    await dispatch(deleteProduct(id));       /* deleteProduct and getProducts are functions which are imported from the authSLice not directly from the productService */
    await dispatch(getProducts());
  };   

  const confirmDelete = (id) => {               /* this is the popup thaat will come when the user clicks on the delte icon, this  is made wiht the help of react-confirm-aleert package of the "REACT" */
    confirmAlert({
      title: "Delete Product",
      message: "Are you sure you want to delete this product.",
      buttons: [
        {
          label: "Delete",
          onClick: () => delProduct(id),    /* when the user clicks on this this label we call the above function */
        },
        {
          label: "Cancel",
          // onClick: () => alert('Click No')
        },
      ],
    });
  };



  //   Begin Pagination
  const [currentItems, setCurrentItems] = useState([]);           /* current items are the items that will be currently displayed on the page, so initially we set it to an empty array */
  const [pageCount, setPageCount] = useState(0);
  const [itemOffset, setItemOffset] = useState(0);
  const itemsPerPage = 5;                                            /* the no of items that we need per page */


  useEffect(() => {
    const endOffset = itemOffset + itemsPerPage;        /* jitne no of products slice krne hai vo endOffset aur jhan se start krna hai vo itemOffset */
    setCurrentItems(filteredProducts.slice(itemOffset, endOffset));        /* slice pe kya hota hai ki new array return krta hai, pehli value hoti hai "index", aur dusri hoti hai kitne no.of elements slice krne hain  */
    setPageCount(Math.ceil(filteredProducts.length / itemsPerPage));
  }, [itemOffset, itemsPerPage, filteredProducts]);

  const handlePageClick = (event) => {
    const newOffset = (event.selected * itemsPerPage) % filteredProducts.length;   /* this tells ki kitne elements rendered hogaye, aur uske hisab se hum item offset ko set krdete hai ki itne ke baad se render krne hai ab  */
    setItemOffset(newOffset);          /* creating a new itemOffset */
  };
  //   End Pagination


  useEffect(() => {
    dispatch(FILTER_PRODUCTS({ products, search }));         /* we create this hook that whenever any of the dependency changes, we dispatch this reducer, with the  */
  }, [products, search, dispatch]);


  return (
    <div className="product-list">
      <hr />           {/* the line after which list starts */}
      <div className="table">
        <div className="--flex-between --flex-dir-column">
          <span>
            <h3>Inventory Items</h3>
          </span>
          <span>                              {/* search component */}
            <Search                                  
              value={search}
              onChange={(e) => setSearch(e.target.value)}             
            />                                  {/* when the user types anything we store its state into "search variable" */}
          </span>
        </div>  
        {isLoading && <SpinnerImg />}    {/* if list is being loaded */}
        <div className="table">
         {/* if isLoading is set to false and the length is 0 so we say  */}
          {!isLoading && products.length === 0 ? (                         
            <p>-- No product found, please add a product..</p>
          ) : (
            <table>
              <thead>
                <tr>
                  <th>s/n</th>
                  <th>Name</th>
                  <th>Category</th>
                  <th>Price</th>
                  <th>Quantity</th>
                  <th>Value</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                {currentItems.map((product, index) => {                 {/* now the products must have been there in the currentItems(pagination) array, so we map through the array and for every index, we destructure all of its properties, and display the data for every item present */}
                  const { _id, name, category, price, quantity } = product;
                  return (
                    <tr key={_id}>             {/* this is the "_id" that is generated by the backend   */}
                      <td>{index + 1}</td>           {/* index + 1 becuase index is 0-based  */}
                      <td>{shortenText(name, 16)}</td>   {/* theproduct names can be very very long so we shorten the name */}
                      <td>{category}</td>
                      <td>
                        {"Rs."}
                        {price}
                      </td>
                      <td>{quantity}</td>
                      <td>
                        {"Rs."}
                        {price * quantity}
                      </td>
                      <td className="icons">
                        <span>
                          <Link to={`/product-detail/${_id}`}>            {/* the eye icon when clicked takes us this route  */}
                            <AiOutlineEye size={25} color={"purple"} />
                          </Link>
                        </span>
                        <span>
                          <Link to={`/edit-product/${_id}`}>
                            <FaEdit size={20} color={"green"} />
                          </Link>
                        </span>
                        <span>
                          <FaTrashAlt
                            size={20}
                            color={"red"}
                            onClick={() => confirmDelete(_id)}            
                          />            {/* when this is clicked we call the confirmDelete popup with the '_id' as the argument  */}
                        </span>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          )}
        </div>
        {/* imported from react-paginate */}
        <ReactPaginate
          breakLabel="..."
          nextLabel="Next"
          onPageChange={handlePageClick}
          pageRangeDisplayed={3}
          pageCount={pageCount}
          previousLabel="Prev"
          renderOnZeroPageCount={null}
          containerClassName="pagination"
          pageLinkClassName="page-num"
          previousLinkClassName="page-num"
          nextLinkClassName="page-num"
          activeLinkClassName="activePage"
        />
      </div>
    </div>
  );
};

export default ProductList;
